// Code generated by mockery v2.31.1. DO NOT EDIT.

package athenamock

import (
	context "context"

	athena "github.com/aws/aws-sdk-go/service/athena"

	mock "github.com/stretchr/testify/mock"

	request "github.com/aws/aws-sdk-go/aws/request"
)

// AthenaAPI is an autogenerated mock type for the AthenaAPI type
type AthenaAPI struct {
	mock.Mock
}

// BatchGetNamedQuery provides a mock function with given fields: _a0
func (_m *AthenaAPI) BatchGetNamedQuery(_a0 *athena.BatchGetNamedQueryInput) (*athena.BatchGetNamedQueryOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.BatchGetNamedQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.BatchGetNamedQueryInput) (*athena.BatchGetNamedQueryOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.BatchGetNamedQueryInput) *athena.BatchGetNamedQueryOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.BatchGetNamedQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.BatchGetNamedQueryInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetNamedQueryRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) BatchGetNamedQueryRequest(_a0 *athena.BatchGetNamedQueryInput) (*request.Request, *athena.BatchGetNamedQueryOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.BatchGetNamedQueryOutput
	if rf, ok := ret.Get(0).(func(*athena.BatchGetNamedQueryInput) (*request.Request, *athena.BatchGetNamedQueryOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.BatchGetNamedQueryInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.BatchGetNamedQueryInput) *athena.BatchGetNamedQueryOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.BatchGetNamedQueryOutput)
		}
	}

	return r0, r1
}

// BatchGetNamedQueryWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) BatchGetNamedQueryWithContext(_a0 context.Context, _a1 *athena.BatchGetNamedQueryInput, _a2 ...request.Option) (*athena.BatchGetNamedQueryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.BatchGetNamedQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.BatchGetNamedQueryInput, ...request.Option) (*athena.BatchGetNamedQueryOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.BatchGetNamedQueryInput, ...request.Option) *athena.BatchGetNamedQueryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.BatchGetNamedQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.BatchGetNamedQueryInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetPreparedStatement provides a mock function with given fields: _a0
func (_m *AthenaAPI) BatchGetPreparedStatement(_a0 *athena.BatchGetPreparedStatementInput) (*athena.BatchGetPreparedStatementOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.BatchGetPreparedStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.BatchGetPreparedStatementInput) (*athena.BatchGetPreparedStatementOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.BatchGetPreparedStatementInput) *athena.BatchGetPreparedStatementOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.BatchGetPreparedStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.BatchGetPreparedStatementInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetPreparedStatementRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) BatchGetPreparedStatementRequest(_a0 *athena.BatchGetPreparedStatementInput) (*request.Request, *athena.BatchGetPreparedStatementOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.BatchGetPreparedStatementOutput
	if rf, ok := ret.Get(0).(func(*athena.BatchGetPreparedStatementInput) (*request.Request, *athena.BatchGetPreparedStatementOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.BatchGetPreparedStatementInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.BatchGetPreparedStatementInput) *athena.BatchGetPreparedStatementOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.BatchGetPreparedStatementOutput)
		}
	}

	return r0, r1
}

// BatchGetPreparedStatementWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) BatchGetPreparedStatementWithContext(_a0 context.Context, _a1 *athena.BatchGetPreparedStatementInput, _a2 ...request.Option) (*athena.BatchGetPreparedStatementOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.BatchGetPreparedStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.BatchGetPreparedStatementInput, ...request.Option) (*athena.BatchGetPreparedStatementOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.BatchGetPreparedStatementInput, ...request.Option) *athena.BatchGetPreparedStatementOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.BatchGetPreparedStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.BatchGetPreparedStatementInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetQueryExecution provides a mock function with given fields: _a0
func (_m *AthenaAPI) BatchGetQueryExecution(_a0 *athena.BatchGetQueryExecutionInput) (*athena.BatchGetQueryExecutionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.BatchGetQueryExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.BatchGetQueryExecutionInput) (*athena.BatchGetQueryExecutionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.BatchGetQueryExecutionInput) *athena.BatchGetQueryExecutionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.BatchGetQueryExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.BatchGetQueryExecutionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetQueryExecutionRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) BatchGetQueryExecutionRequest(_a0 *athena.BatchGetQueryExecutionInput) (*request.Request, *athena.BatchGetQueryExecutionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.BatchGetQueryExecutionOutput
	if rf, ok := ret.Get(0).(func(*athena.BatchGetQueryExecutionInput) (*request.Request, *athena.BatchGetQueryExecutionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.BatchGetQueryExecutionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.BatchGetQueryExecutionInput) *athena.BatchGetQueryExecutionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.BatchGetQueryExecutionOutput)
		}
	}

	return r0, r1
}

// BatchGetQueryExecutionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) BatchGetQueryExecutionWithContext(_a0 context.Context, _a1 *athena.BatchGetQueryExecutionInput, _a2 ...request.Option) (*athena.BatchGetQueryExecutionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.BatchGetQueryExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.BatchGetQueryExecutionInput, ...request.Option) (*athena.BatchGetQueryExecutionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.BatchGetQueryExecutionInput, ...request.Option) *athena.BatchGetQueryExecutionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.BatchGetQueryExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.BatchGetQueryExecutionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelCapacityReservation provides a mock function with given fields: _a0
func (_m *AthenaAPI) CancelCapacityReservation(_a0 *athena.CancelCapacityReservationInput) (*athena.CancelCapacityReservationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.CancelCapacityReservationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.CancelCapacityReservationInput) (*athena.CancelCapacityReservationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.CancelCapacityReservationInput) *athena.CancelCapacityReservationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CancelCapacityReservationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.CancelCapacityReservationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelCapacityReservationRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) CancelCapacityReservationRequest(_a0 *athena.CancelCapacityReservationInput) (*request.Request, *athena.CancelCapacityReservationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.CancelCapacityReservationOutput
	if rf, ok := ret.Get(0).(func(*athena.CancelCapacityReservationInput) (*request.Request, *athena.CancelCapacityReservationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.CancelCapacityReservationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.CancelCapacityReservationInput) *athena.CancelCapacityReservationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.CancelCapacityReservationOutput)
		}
	}

	return r0, r1
}

// CancelCapacityReservationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) CancelCapacityReservationWithContext(_a0 context.Context, _a1 *athena.CancelCapacityReservationInput, _a2 ...request.Option) (*athena.CancelCapacityReservationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.CancelCapacityReservationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CancelCapacityReservationInput, ...request.Option) (*athena.CancelCapacityReservationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CancelCapacityReservationInput, ...request.Option) *athena.CancelCapacityReservationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CancelCapacityReservationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.CancelCapacityReservationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCapacityReservation provides a mock function with given fields: _a0
func (_m *AthenaAPI) CreateCapacityReservation(_a0 *athena.CreateCapacityReservationInput) (*athena.CreateCapacityReservationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.CreateCapacityReservationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.CreateCapacityReservationInput) (*athena.CreateCapacityReservationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.CreateCapacityReservationInput) *athena.CreateCapacityReservationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CreateCapacityReservationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.CreateCapacityReservationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCapacityReservationRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) CreateCapacityReservationRequest(_a0 *athena.CreateCapacityReservationInput) (*request.Request, *athena.CreateCapacityReservationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.CreateCapacityReservationOutput
	if rf, ok := ret.Get(0).(func(*athena.CreateCapacityReservationInput) (*request.Request, *athena.CreateCapacityReservationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.CreateCapacityReservationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.CreateCapacityReservationInput) *athena.CreateCapacityReservationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.CreateCapacityReservationOutput)
		}
	}

	return r0, r1
}

// CreateCapacityReservationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) CreateCapacityReservationWithContext(_a0 context.Context, _a1 *athena.CreateCapacityReservationInput, _a2 ...request.Option) (*athena.CreateCapacityReservationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.CreateCapacityReservationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreateCapacityReservationInput, ...request.Option) (*athena.CreateCapacityReservationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreateCapacityReservationInput, ...request.Option) *athena.CreateCapacityReservationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CreateCapacityReservationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.CreateCapacityReservationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDataCatalog provides a mock function with given fields: _a0
func (_m *AthenaAPI) CreateDataCatalog(_a0 *athena.CreateDataCatalogInput) (*athena.CreateDataCatalogOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.CreateDataCatalogOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.CreateDataCatalogInput) (*athena.CreateDataCatalogOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.CreateDataCatalogInput) *athena.CreateDataCatalogOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CreateDataCatalogOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.CreateDataCatalogInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDataCatalogRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) CreateDataCatalogRequest(_a0 *athena.CreateDataCatalogInput) (*request.Request, *athena.CreateDataCatalogOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.CreateDataCatalogOutput
	if rf, ok := ret.Get(0).(func(*athena.CreateDataCatalogInput) (*request.Request, *athena.CreateDataCatalogOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.CreateDataCatalogInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.CreateDataCatalogInput) *athena.CreateDataCatalogOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.CreateDataCatalogOutput)
		}
	}

	return r0, r1
}

// CreateDataCatalogWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) CreateDataCatalogWithContext(_a0 context.Context, _a1 *athena.CreateDataCatalogInput, _a2 ...request.Option) (*athena.CreateDataCatalogOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.CreateDataCatalogOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreateDataCatalogInput, ...request.Option) (*athena.CreateDataCatalogOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreateDataCatalogInput, ...request.Option) *athena.CreateDataCatalogOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CreateDataCatalogOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.CreateDataCatalogInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNamedQuery provides a mock function with given fields: _a0
func (_m *AthenaAPI) CreateNamedQuery(_a0 *athena.CreateNamedQueryInput) (*athena.CreateNamedQueryOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.CreateNamedQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.CreateNamedQueryInput) (*athena.CreateNamedQueryOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.CreateNamedQueryInput) *athena.CreateNamedQueryOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CreateNamedQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.CreateNamedQueryInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNamedQueryRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) CreateNamedQueryRequest(_a0 *athena.CreateNamedQueryInput) (*request.Request, *athena.CreateNamedQueryOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.CreateNamedQueryOutput
	if rf, ok := ret.Get(0).(func(*athena.CreateNamedQueryInput) (*request.Request, *athena.CreateNamedQueryOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.CreateNamedQueryInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.CreateNamedQueryInput) *athena.CreateNamedQueryOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.CreateNamedQueryOutput)
		}
	}

	return r0, r1
}

// CreateNamedQueryWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) CreateNamedQueryWithContext(_a0 context.Context, _a1 *athena.CreateNamedQueryInput, _a2 ...request.Option) (*athena.CreateNamedQueryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.CreateNamedQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreateNamedQueryInput, ...request.Option) (*athena.CreateNamedQueryOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreateNamedQueryInput, ...request.Option) *athena.CreateNamedQueryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CreateNamedQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.CreateNamedQueryInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNotebook provides a mock function with given fields: _a0
func (_m *AthenaAPI) CreateNotebook(_a0 *athena.CreateNotebookInput) (*athena.CreateNotebookOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.CreateNotebookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.CreateNotebookInput) (*athena.CreateNotebookOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.CreateNotebookInput) *athena.CreateNotebookOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CreateNotebookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.CreateNotebookInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNotebookRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) CreateNotebookRequest(_a0 *athena.CreateNotebookInput) (*request.Request, *athena.CreateNotebookOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.CreateNotebookOutput
	if rf, ok := ret.Get(0).(func(*athena.CreateNotebookInput) (*request.Request, *athena.CreateNotebookOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.CreateNotebookInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.CreateNotebookInput) *athena.CreateNotebookOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.CreateNotebookOutput)
		}
	}

	return r0, r1
}

// CreateNotebookWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) CreateNotebookWithContext(_a0 context.Context, _a1 *athena.CreateNotebookInput, _a2 ...request.Option) (*athena.CreateNotebookOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.CreateNotebookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreateNotebookInput, ...request.Option) (*athena.CreateNotebookOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreateNotebookInput, ...request.Option) *athena.CreateNotebookOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CreateNotebookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.CreateNotebookInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePreparedStatement provides a mock function with given fields: _a0
func (_m *AthenaAPI) CreatePreparedStatement(_a0 *athena.CreatePreparedStatementInput) (*athena.CreatePreparedStatementOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.CreatePreparedStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.CreatePreparedStatementInput) (*athena.CreatePreparedStatementOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.CreatePreparedStatementInput) *athena.CreatePreparedStatementOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CreatePreparedStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.CreatePreparedStatementInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePreparedStatementRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) CreatePreparedStatementRequest(_a0 *athena.CreatePreparedStatementInput) (*request.Request, *athena.CreatePreparedStatementOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.CreatePreparedStatementOutput
	if rf, ok := ret.Get(0).(func(*athena.CreatePreparedStatementInput) (*request.Request, *athena.CreatePreparedStatementOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.CreatePreparedStatementInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.CreatePreparedStatementInput) *athena.CreatePreparedStatementOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.CreatePreparedStatementOutput)
		}
	}

	return r0, r1
}

// CreatePreparedStatementWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) CreatePreparedStatementWithContext(_a0 context.Context, _a1 *athena.CreatePreparedStatementInput, _a2 ...request.Option) (*athena.CreatePreparedStatementOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.CreatePreparedStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreatePreparedStatementInput, ...request.Option) (*athena.CreatePreparedStatementOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreatePreparedStatementInput, ...request.Option) *athena.CreatePreparedStatementOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CreatePreparedStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.CreatePreparedStatementInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePresignedNotebookUrl provides a mock function with given fields: _a0
func (_m *AthenaAPI) CreatePresignedNotebookUrl(_a0 *athena.CreatePresignedNotebookUrlInput) (*athena.CreatePresignedNotebookUrlOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.CreatePresignedNotebookUrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.CreatePresignedNotebookUrlInput) (*athena.CreatePresignedNotebookUrlOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.CreatePresignedNotebookUrlInput) *athena.CreatePresignedNotebookUrlOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CreatePresignedNotebookUrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.CreatePresignedNotebookUrlInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePresignedNotebookUrlRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) CreatePresignedNotebookUrlRequest(_a0 *athena.CreatePresignedNotebookUrlInput) (*request.Request, *athena.CreatePresignedNotebookUrlOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.CreatePresignedNotebookUrlOutput
	if rf, ok := ret.Get(0).(func(*athena.CreatePresignedNotebookUrlInput) (*request.Request, *athena.CreatePresignedNotebookUrlOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.CreatePresignedNotebookUrlInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.CreatePresignedNotebookUrlInput) *athena.CreatePresignedNotebookUrlOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.CreatePresignedNotebookUrlOutput)
		}
	}

	return r0, r1
}

// CreatePresignedNotebookUrlWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) CreatePresignedNotebookUrlWithContext(_a0 context.Context, _a1 *athena.CreatePresignedNotebookUrlInput, _a2 ...request.Option) (*athena.CreatePresignedNotebookUrlOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.CreatePresignedNotebookUrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreatePresignedNotebookUrlInput, ...request.Option) (*athena.CreatePresignedNotebookUrlOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreatePresignedNotebookUrlInput, ...request.Option) *athena.CreatePresignedNotebookUrlOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CreatePresignedNotebookUrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.CreatePresignedNotebookUrlInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkGroup provides a mock function with given fields: _a0
func (_m *AthenaAPI) CreateWorkGroup(_a0 *athena.CreateWorkGroupInput) (*athena.CreateWorkGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.CreateWorkGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.CreateWorkGroupInput) (*athena.CreateWorkGroupOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.CreateWorkGroupInput) *athena.CreateWorkGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CreateWorkGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.CreateWorkGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkGroupRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) CreateWorkGroupRequest(_a0 *athena.CreateWorkGroupInput) (*request.Request, *athena.CreateWorkGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.CreateWorkGroupOutput
	if rf, ok := ret.Get(0).(func(*athena.CreateWorkGroupInput) (*request.Request, *athena.CreateWorkGroupOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.CreateWorkGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.CreateWorkGroupInput) *athena.CreateWorkGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.CreateWorkGroupOutput)
		}
	}

	return r0, r1
}

// CreateWorkGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) CreateWorkGroupWithContext(_a0 context.Context, _a1 *athena.CreateWorkGroupInput, _a2 ...request.Option) (*athena.CreateWorkGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.CreateWorkGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreateWorkGroupInput, ...request.Option) (*athena.CreateWorkGroupOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreateWorkGroupInput, ...request.Option) *athena.CreateWorkGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CreateWorkGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.CreateWorkGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCapacityReservation provides a mock function with given fields: _a0
func (_m *AthenaAPI) DeleteCapacityReservation(_a0 *athena.DeleteCapacityReservationInput) (*athena.DeleteCapacityReservationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.DeleteCapacityReservationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.DeleteCapacityReservationInput) (*athena.DeleteCapacityReservationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.DeleteCapacityReservationInput) *athena.DeleteCapacityReservationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.DeleteCapacityReservationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.DeleteCapacityReservationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCapacityReservationRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) DeleteCapacityReservationRequest(_a0 *athena.DeleteCapacityReservationInput) (*request.Request, *athena.DeleteCapacityReservationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.DeleteCapacityReservationOutput
	if rf, ok := ret.Get(0).(func(*athena.DeleteCapacityReservationInput) (*request.Request, *athena.DeleteCapacityReservationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.DeleteCapacityReservationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.DeleteCapacityReservationInput) *athena.DeleteCapacityReservationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.DeleteCapacityReservationOutput)
		}
	}

	return r0, r1
}

// DeleteCapacityReservationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) DeleteCapacityReservationWithContext(_a0 context.Context, _a1 *athena.DeleteCapacityReservationInput, _a2 ...request.Option) (*athena.DeleteCapacityReservationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.DeleteCapacityReservationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeleteCapacityReservationInput, ...request.Option) (*athena.DeleteCapacityReservationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeleteCapacityReservationInput, ...request.Option) *athena.DeleteCapacityReservationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.DeleteCapacityReservationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.DeleteCapacityReservationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDataCatalog provides a mock function with given fields: _a0
func (_m *AthenaAPI) DeleteDataCatalog(_a0 *athena.DeleteDataCatalogInput) (*athena.DeleteDataCatalogOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.DeleteDataCatalogOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.DeleteDataCatalogInput) (*athena.DeleteDataCatalogOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.DeleteDataCatalogInput) *athena.DeleteDataCatalogOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.DeleteDataCatalogOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.DeleteDataCatalogInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDataCatalogRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) DeleteDataCatalogRequest(_a0 *athena.DeleteDataCatalogInput) (*request.Request, *athena.DeleteDataCatalogOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.DeleteDataCatalogOutput
	if rf, ok := ret.Get(0).(func(*athena.DeleteDataCatalogInput) (*request.Request, *athena.DeleteDataCatalogOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.DeleteDataCatalogInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.DeleteDataCatalogInput) *athena.DeleteDataCatalogOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.DeleteDataCatalogOutput)
		}
	}

	return r0, r1
}

// DeleteDataCatalogWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) DeleteDataCatalogWithContext(_a0 context.Context, _a1 *athena.DeleteDataCatalogInput, _a2 ...request.Option) (*athena.DeleteDataCatalogOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.DeleteDataCatalogOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeleteDataCatalogInput, ...request.Option) (*athena.DeleteDataCatalogOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeleteDataCatalogInput, ...request.Option) *athena.DeleteDataCatalogOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.DeleteDataCatalogOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.DeleteDataCatalogInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNamedQuery provides a mock function with given fields: _a0
func (_m *AthenaAPI) DeleteNamedQuery(_a0 *athena.DeleteNamedQueryInput) (*athena.DeleteNamedQueryOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.DeleteNamedQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.DeleteNamedQueryInput) (*athena.DeleteNamedQueryOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.DeleteNamedQueryInput) *athena.DeleteNamedQueryOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.DeleteNamedQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.DeleteNamedQueryInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNamedQueryRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) DeleteNamedQueryRequest(_a0 *athena.DeleteNamedQueryInput) (*request.Request, *athena.DeleteNamedQueryOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.DeleteNamedQueryOutput
	if rf, ok := ret.Get(0).(func(*athena.DeleteNamedQueryInput) (*request.Request, *athena.DeleteNamedQueryOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.DeleteNamedQueryInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.DeleteNamedQueryInput) *athena.DeleteNamedQueryOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.DeleteNamedQueryOutput)
		}
	}

	return r0, r1
}

// DeleteNamedQueryWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) DeleteNamedQueryWithContext(_a0 context.Context, _a1 *athena.DeleteNamedQueryInput, _a2 ...request.Option) (*athena.DeleteNamedQueryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.DeleteNamedQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeleteNamedQueryInput, ...request.Option) (*athena.DeleteNamedQueryOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeleteNamedQueryInput, ...request.Option) *athena.DeleteNamedQueryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.DeleteNamedQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.DeleteNamedQueryInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNotebook provides a mock function with given fields: _a0
func (_m *AthenaAPI) DeleteNotebook(_a0 *athena.DeleteNotebookInput) (*athena.DeleteNotebookOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.DeleteNotebookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.DeleteNotebookInput) (*athena.DeleteNotebookOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.DeleteNotebookInput) *athena.DeleteNotebookOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.DeleteNotebookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.DeleteNotebookInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNotebookRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) DeleteNotebookRequest(_a0 *athena.DeleteNotebookInput) (*request.Request, *athena.DeleteNotebookOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.DeleteNotebookOutput
	if rf, ok := ret.Get(0).(func(*athena.DeleteNotebookInput) (*request.Request, *athena.DeleteNotebookOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.DeleteNotebookInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.DeleteNotebookInput) *athena.DeleteNotebookOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.DeleteNotebookOutput)
		}
	}

	return r0, r1
}

// DeleteNotebookWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) DeleteNotebookWithContext(_a0 context.Context, _a1 *athena.DeleteNotebookInput, _a2 ...request.Option) (*athena.DeleteNotebookOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.DeleteNotebookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeleteNotebookInput, ...request.Option) (*athena.DeleteNotebookOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeleteNotebookInput, ...request.Option) *athena.DeleteNotebookOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.DeleteNotebookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.DeleteNotebookInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePreparedStatement provides a mock function with given fields: _a0
func (_m *AthenaAPI) DeletePreparedStatement(_a0 *athena.DeletePreparedStatementInput) (*athena.DeletePreparedStatementOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.DeletePreparedStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.DeletePreparedStatementInput) (*athena.DeletePreparedStatementOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.DeletePreparedStatementInput) *athena.DeletePreparedStatementOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.DeletePreparedStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.DeletePreparedStatementInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePreparedStatementRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) DeletePreparedStatementRequest(_a0 *athena.DeletePreparedStatementInput) (*request.Request, *athena.DeletePreparedStatementOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.DeletePreparedStatementOutput
	if rf, ok := ret.Get(0).(func(*athena.DeletePreparedStatementInput) (*request.Request, *athena.DeletePreparedStatementOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.DeletePreparedStatementInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.DeletePreparedStatementInput) *athena.DeletePreparedStatementOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.DeletePreparedStatementOutput)
		}
	}

	return r0, r1
}

// DeletePreparedStatementWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) DeletePreparedStatementWithContext(_a0 context.Context, _a1 *athena.DeletePreparedStatementInput, _a2 ...request.Option) (*athena.DeletePreparedStatementOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.DeletePreparedStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeletePreparedStatementInput, ...request.Option) (*athena.DeletePreparedStatementOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeletePreparedStatementInput, ...request.Option) *athena.DeletePreparedStatementOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.DeletePreparedStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.DeletePreparedStatementInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkGroup provides a mock function with given fields: _a0
func (_m *AthenaAPI) DeleteWorkGroup(_a0 *athena.DeleteWorkGroupInput) (*athena.DeleteWorkGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.DeleteWorkGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.DeleteWorkGroupInput) (*athena.DeleteWorkGroupOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.DeleteWorkGroupInput) *athena.DeleteWorkGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.DeleteWorkGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.DeleteWorkGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkGroupRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) DeleteWorkGroupRequest(_a0 *athena.DeleteWorkGroupInput) (*request.Request, *athena.DeleteWorkGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.DeleteWorkGroupOutput
	if rf, ok := ret.Get(0).(func(*athena.DeleteWorkGroupInput) (*request.Request, *athena.DeleteWorkGroupOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.DeleteWorkGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.DeleteWorkGroupInput) *athena.DeleteWorkGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.DeleteWorkGroupOutput)
		}
	}

	return r0, r1
}

// DeleteWorkGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) DeleteWorkGroupWithContext(_a0 context.Context, _a1 *athena.DeleteWorkGroupInput, _a2 ...request.Option) (*athena.DeleteWorkGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.DeleteWorkGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeleteWorkGroupInput, ...request.Option) (*athena.DeleteWorkGroupOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeleteWorkGroupInput, ...request.Option) *athena.DeleteWorkGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.DeleteWorkGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.DeleteWorkGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportNotebook provides a mock function with given fields: _a0
func (_m *AthenaAPI) ExportNotebook(_a0 *athena.ExportNotebookInput) (*athena.ExportNotebookOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.ExportNotebookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.ExportNotebookInput) (*athena.ExportNotebookOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ExportNotebookInput) *athena.ExportNotebookOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ExportNotebookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ExportNotebookInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportNotebookRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) ExportNotebookRequest(_a0 *athena.ExportNotebookInput) (*request.Request, *athena.ExportNotebookOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.ExportNotebookOutput
	if rf, ok := ret.Get(0).(func(*athena.ExportNotebookInput) (*request.Request, *athena.ExportNotebookOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ExportNotebookInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ExportNotebookInput) *athena.ExportNotebookOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.ExportNotebookOutput)
		}
	}

	return r0, r1
}

// ExportNotebookWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) ExportNotebookWithContext(_a0 context.Context, _a1 *athena.ExportNotebookInput, _a2 ...request.Option) (*athena.ExportNotebookOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.ExportNotebookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ExportNotebookInput, ...request.Option) (*athena.ExportNotebookOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ExportNotebookInput, ...request.Option) *athena.ExportNotebookOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ExportNotebookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ExportNotebookInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCalculationExecution provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetCalculationExecution(_a0 *athena.GetCalculationExecutionInput) (*athena.GetCalculationExecutionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.GetCalculationExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.GetCalculationExecutionInput) (*athena.GetCalculationExecutionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetCalculationExecutionInput) *athena.GetCalculationExecutionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetCalculationExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetCalculationExecutionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCalculationExecutionCode provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetCalculationExecutionCode(_a0 *athena.GetCalculationExecutionCodeInput) (*athena.GetCalculationExecutionCodeOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.GetCalculationExecutionCodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.GetCalculationExecutionCodeInput) (*athena.GetCalculationExecutionCodeOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetCalculationExecutionCodeInput) *athena.GetCalculationExecutionCodeOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetCalculationExecutionCodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetCalculationExecutionCodeInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCalculationExecutionCodeRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetCalculationExecutionCodeRequest(_a0 *athena.GetCalculationExecutionCodeInput) (*request.Request, *athena.GetCalculationExecutionCodeOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.GetCalculationExecutionCodeOutput
	if rf, ok := ret.Get(0).(func(*athena.GetCalculationExecutionCodeInput) (*request.Request, *athena.GetCalculationExecutionCodeOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetCalculationExecutionCodeInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetCalculationExecutionCodeInput) *athena.GetCalculationExecutionCodeOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.GetCalculationExecutionCodeOutput)
		}
	}

	return r0, r1
}

// GetCalculationExecutionCodeWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) GetCalculationExecutionCodeWithContext(_a0 context.Context, _a1 *athena.GetCalculationExecutionCodeInput, _a2 ...request.Option) (*athena.GetCalculationExecutionCodeOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.GetCalculationExecutionCodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetCalculationExecutionCodeInput, ...request.Option) (*athena.GetCalculationExecutionCodeOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetCalculationExecutionCodeInput, ...request.Option) *athena.GetCalculationExecutionCodeOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetCalculationExecutionCodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetCalculationExecutionCodeInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCalculationExecutionRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetCalculationExecutionRequest(_a0 *athena.GetCalculationExecutionInput) (*request.Request, *athena.GetCalculationExecutionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.GetCalculationExecutionOutput
	if rf, ok := ret.Get(0).(func(*athena.GetCalculationExecutionInput) (*request.Request, *athena.GetCalculationExecutionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetCalculationExecutionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetCalculationExecutionInput) *athena.GetCalculationExecutionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.GetCalculationExecutionOutput)
		}
	}

	return r0, r1
}

// GetCalculationExecutionStatus provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetCalculationExecutionStatus(_a0 *athena.GetCalculationExecutionStatusInput) (*athena.GetCalculationExecutionStatusOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.GetCalculationExecutionStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.GetCalculationExecutionStatusInput) (*athena.GetCalculationExecutionStatusOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetCalculationExecutionStatusInput) *athena.GetCalculationExecutionStatusOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetCalculationExecutionStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetCalculationExecutionStatusInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCalculationExecutionStatusRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetCalculationExecutionStatusRequest(_a0 *athena.GetCalculationExecutionStatusInput) (*request.Request, *athena.GetCalculationExecutionStatusOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.GetCalculationExecutionStatusOutput
	if rf, ok := ret.Get(0).(func(*athena.GetCalculationExecutionStatusInput) (*request.Request, *athena.GetCalculationExecutionStatusOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetCalculationExecutionStatusInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetCalculationExecutionStatusInput) *athena.GetCalculationExecutionStatusOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.GetCalculationExecutionStatusOutput)
		}
	}

	return r0, r1
}

// GetCalculationExecutionStatusWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) GetCalculationExecutionStatusWithContext(_a0 context.Context, _a1 *athena.GetCalculationExecutionStatusInput, _a2 ...request.Option) (*athena.GetCalculationExecutionStatusOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.GetCalculationExecutionStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetCalculationExecutionStatusInput, ...request.Option) (*athena.GetCalculationExecutionStatusOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetCalculationExecutionStatusInput, ...request.Option) *athena.GetCalculationExecutionStatusOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetCalculationExecutionStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetCalculationExecutionStatusInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCalculationExecutionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) GetCalculationExecutionWithContext(_a0 context.Context, _a1 *athena.GetCalculationExecutionInput, _a2 ...request.Option) (*athena.GetCalculationExecutionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.GetCalculationExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetCalculationExecutionInput, ...request.Option) (*athena.GetCalculationExecutionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetCalculationExecutionInput, ...request.Option) *athena.GetCalculationExecutionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetCalculationExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetCalculationExecutionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCapacityAssignmentConfiguration provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetCapacityAssignmentConfiguration(_a0 *athena.GetCapacityAssignmentConfigurationInput) (*athena.GetCapacityAssignmentConfigurationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.GetCapacityAssignmentConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.GetCapacityAssignmentConfigurationInput) (*athena.GetCapacityAssignmentConfigurationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetCapacityAssignmentConfigurationInput) *athena.GetCapacityAssignmentConfigurationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetCapacityAssignmentConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetCapacityAssignmentConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCapacityAssignmentConfigurationRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetCapacityAssignmentConfigurationRequest(_a0 *athena.GetCapacityAssignmentConfigurationInput) (*request.Request, *athena.GetCapacityAssignmentConfigurationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.GetCapacityAssignmentConfigurationOutput
	if rf, ok := ret.Get(0).(func(*athena.GetCapacityAssignmentConfigurationInput) (*request.Request, *athena.GetCapacityAssignmentConfigurationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetCapacityAssignmentConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetCapacityAssignmentConfigurationInput) *athena.GetCapacityAssignmentConfigurationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.GetCapacityAssignmentConfigurationOutput)
		}
	}

	return r0, r1
}

// GetCapacityAssignmentConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) GetCapacityAssignmentConfigurationWithContext(_a0 context.Context, _a1 *athena.GetCapacityAssignmentConfigurationInput, _a2 ...request.Option) (*athena.GetCapacityAssignmentConfigurationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.GetCapacityAssignmentConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetCapacityAssignmentConfigurationInput, ...request.Option) (*athena.GetCapacityAssignmentConfigurationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetCapacityAssignmentConfigurationInput, ...request.Option) *athena.GetCapacityAssignmentConfigurationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetCapacityAssignmentConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetCapacityAssignmentConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCapacityReservation provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetCapacityReservation(_a0 *athena.GetCapacityReservationInput) (*athena.GetCapacityReservationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.GetCapacityReservationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.GetCapacityReservationInput) (*athena.GetCapacityReservationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetCapacityReservationInput) *athena.GetCapacityReservationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetCapacityReservationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetCapacityReservationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCapacityReservationRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetCapacityReservationRequest(_a0 *athena.GetCapacityReservationInput) (*request.Request, *athena.GetCapacityReservationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.GetCapacityReservationOutput
	if rf, ok := ret.Get(0).(func(*athena.GetCapacityReservationInput) (*request.Request, *athena.GetCapacityReservationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetCapacityReservationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetCapacityReservationInput) *athena.GetCapacityReservationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.GetCapacityReservationOutput)
		}
	}

	return r0, r1
}

// GetCapacityReservationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) GetCapacityReservationWithContext(_a0 context.Context, _a1 *athena.GetCapacityReservationInput, _a2 ...request.Option) (*athena.GetCapacityReservationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.GetCapacityReservationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetCapacityReservationInput, ...request.Option) (*athena.GetCapacityReservationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetCapacityReservationInput, ...request.Option) *athena.GetCapacityReservationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetCapacityReservationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetCapacityReservationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataCatalog provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetDataCatalog(_a0 *athena.GetDataCatalogInput) (*athena.GetDataCatalogOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.GetDataCatalogOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.GetDataCatalogInput) (*athena.GetDataCatalogOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetDataCatalogInput) *athena.GetDataCatalogOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetDataCatalogOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetDataCatalogInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataCatalogRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetDataCatalogRequest(_a0 *athena.GetDataCatalogInput) (*request.Request, *athena.GetDataCatalogOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.GetDataCatalogOutput
	if rf, ok := ret.Get(0).(func(*athena.GetDataCatalogInput) (*request.Request, *athena.GetDataCatalogOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetDataCatalogInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetDataCatalogInput) *athena.GetDataCatalogOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.GetDataCatalogOutput)
		}
	}

	return r0, r1
}

// GetDataCatalogWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) GetDataCatalogWithContext(_a0 context.Context, _a1 *athena.GetDataCatalogInput, _a2 ...request.Option) (*athena.GetDataCatalogOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.GetDataCatalogOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetDataCatalogInput, ...request.Option) (*athena.GetDataCatalogOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetDataCatalogInput, ...request.Option) *athena.GetDataCatalogOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetDataCatalogOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetDataCatalogInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatabase provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetDatabase(_a0 *athena.GetDatabaseInput) (*athena.GetDatabaseOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.GetDatabaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.GetDatabaseInput) (*athena.GetDatabaseOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetDatabaseInput) *athena.GetDatabaseOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetDatabaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetDatabaseInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatabaseRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetDatabaseRequest(_a0 *athena.GetDatabaseInput) (*request.Request, *athena.GetDatabaseOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.GetDatabaseOutput
	if rf, ok := ret.Get(0).(func(*athena.GetDatabaseInput) (*request.Request, *athena.GetDatabaseOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetDatabaseInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetDatabaseInput) *athena.GetDatabaseOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.GetDatabaseOutput)
		}
	}

	return r0, r1
}

// GetDatabaseWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) GetDatabaseWithContext(_a0 context.Context, _a1 *athena.GetDatabaseInput, _a2 ...request.Option) (*athena.GetDatabaseOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.GetDatabaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetDatabaseInput, ...request.Option) (*athena.GetDatabaseOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetDatabaseInput, ...request.Option) *athena.GetDatabaseOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetDatabaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetDatabaseInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamedQuery provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetNamedQuery(_a0 *athena.GetNamedQueryInput) (*athena.GetNamedQueryOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.GetNamedQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.GetNamedQueryInput) (*athena.GetNamedQueryOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetNamedQueryInput) *athena.GetNamedQueryOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetNamedQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetNamedQueryInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamedQueryRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetNamedQueryRequest(_a0 *athena.GetNamedQueryInput) (*request.Request, *athena.GetNamedQueryOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.GetNamedQueryOutput
	if rf, ok := ret.Get(0).(func(*athena.GetNamedQueryInput) (*request.Request, *athena.GetNamedQueryOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetNamedQueryInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetNamedQueryInput) *athena.GetNamedQueryOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.GetNamedQueryOutput)
		}
	}

	return r0, r1
}

// GetNamedQueryWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) GetNamedQueryWithContext(_a0 context.Context, _a1 *athena.GetNamedQueryInput, _a2 ...request.Option) (*athena.GetNamedQueryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.GetNamedQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetNamedQueryInput, ...request.Option) (*athena.GetNamedQueryOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetNamedQueryInput, ...request.Option) *athena.GetNamedQueryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetNamedQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetNamedQueryInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotebookMetadata provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetNotebookMetadata(_a0 *athena.GetNotebookMetadataInput) (*athena.GetNotebookMetadataOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.GetNotebookMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.GetNotebookMetadataInput) (*athena.GetNotebookMetadataOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetNotebookMetadataInput) *athena.GetNotebookMetadataOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetNotebookMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetNotebookMetadataInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotebookMetadataRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetNotebookMetadataRequest(_a0 *athena.GetNotebookMetadataInput) (*request.Request, *athena.GetNotebookMetadataOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.GetNotebookMetadataOutput
	if rf, ok := ret.Get(0).(func(*athena.GetNotebookMetadataInput) (*request.Request, *athena.GetNotebookMetadataOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetNotebookMetadataInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetNotebookMetadataInput) *athena.GetNotebookMetadataOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.GetNotebookMetadataOutput)
		}
	}

	return r0, r1
}

// GetNotebookMetadataWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) GetNotebookMetadataWithContext(_a0 context.Context, _a1 *athena.GetNotebookMetadataInput, _a2 ...request.Option) (*athena.GetNotebookMetadataOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.GetNotebookMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetNotebookMetadataInput, ...request.Option) (*athena.GetNotebookMetadataOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetNotebookMetadataInput, ...request.Option) *athena.GetNotebookMetadataOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetNotebookMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetNotebookMetadataInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPreparedStatement provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetPreparedStatement(_a0 *athena.GetPreparedStatementInput) (*athena.GetPreparedStatementOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.GetPreparedStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.GetPreparedStatementInput) (*athena.GetPreparedStatementOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetPreparedStatementInput) *athena.GetPreparedStatementOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetPreparedStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetPreparedStatementInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPreparedStatementRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetPreparedStatementRequest(_a0 *athena.GetPreparedStatementInput) (*request.Request, *athena.GetPreparedStatementOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.GetPreparedStatementOutput
	if rf, ok := ret.Get(0).(func(*athena.GetPreparedStatementInput) (*request.Request, *athena.GetPreparedStatementOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetPreparedStatementInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetPreparedStatementInput) *athena.GetPreparedStatementOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.GetPreparedStatementOutput)
		}
	}

	return r0, r1
}

// GetPreparedStatementWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) GetPreparedStatementWithContext(_a0 context.Context, _a1 *athena.GetPreparedStatementInput, _a2 ...request.Option) (*athena.GetPreparedStatementOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.GetPreparedStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetPreparedStatementInput, ...request.Option) (*athena.GetPreparedStatementOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetPreparedStatementInput, ...request.Option) *athena.GetPreparedStatementOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetPreparedStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetPreparedStatementInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryExecution provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetQueryExecution(_a0 *athena.GetQueryExecutionInput) (*athena.GetQueryExecutionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.GetQueryExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.GetQueryExecutionInput) (*athena.GetQueryExecutionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetQueryExecutionInput) *athena.GetQueryExecutionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetQueryExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetQueryExecutionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryExecutionRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetQueryExecutionRequest(_a0 *athena.GetQueryExecutionInput) (*request.Request, *athena.GetQueryExecutionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.GetQueryExecutionOutput
	if rf, ok := ret.Get(0).(func(*athena.GetQueryExecutionInput) (*request.Request, *athena.GetQueryExecutionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetQueryExecutionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetQueryExecutionInput) *athena.GetQueryExecutionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.GetQueryExecutionOutput)
		}
	}

	return r0, r1
}

// GetQueryExecutionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) GetQueryExecutionWithContext(_a0 context.Context, _a1 *athena.GetQueryExecutionInput, _a2 ...request.Option) (*athena.GetQueryExecutionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.GetQueryExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetQueryExecutionInput, ...request.Option) (*athena.GetQueryExecutionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetQueryExecutionInput, ...request.Option) *athena.GetQueryExecutionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetQueryExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetQueryExecutionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryResults provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetQueryResults(_a0 *athena.GetQueryResultsInput) (*athena.GetQueryResultsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.GetQueryResultsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.GetQueryResultsInput) (*athena.GetQueryResultsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetQueryResultsInput) *athena.GetQueryResultsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetQueryResultsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetQueryResultsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryResultsPages provides a mock function with given fields: _a0, _a1
func (_m *AthenaAPI) GetQueryResultsPages(_a0 *athena.GetQueryResultsInput, _a1 func(*athena.GetQueryResultsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*athena.GetQueryResultsInput, func(*athena.GetQueryResultsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetQueryResultsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *AthenaAPI) GetQueryResultsPagesWithContext(_a0 context.Context, _a1 *athena.GetQueryResultsInput, _a2 func(*athena.GetQueryResultsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetQueryResultsInput, func(*athena.GetQueryResultsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetQueryResultsRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetQueryResultsRequest(_a0 *athena.GetQueryResultsInput) (*request.Request, *athena.GetQueryResultsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.GetQueryResultsOutput
	if rf, ok := ret.Get(0).(func(*athena.GetQueryResultsInput) (*request.Request, *athena.GetQueryResultsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetQueryResultsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetQueryResultsInput) *athena.GetQueryResultsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.GetQueryResultsOutput)
		}
	}

	return r0, r1
}

// GetQueryResultsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) GetQueryResultsWithContext(_a0 context.Context, _a1 *athena.GetQueryResultsInput, _a2 ...request.Option) (*athena.GetQueryResultsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.GetQueryResultsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetQueryResultsInput, ...request.Option) (*athena.GetQueryResultsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetQueryResultsInput, ...request.Option) *athena.GetQueryResultsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetQueryResultsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetQueryResultsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryRuntimeStatistics provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetQueryRuntimeStatistics(_a0 *athena.GetQueryRuntimeStatisticsInput) (*athena.GetQueryRuntimeStatisticsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.GetQueryRuntimeStatisticsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.GetQueryRuntimeStatisticsInput) (*athena.GetQueryRuntimeStatisticsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetQueryRuntimeStatisticsInput) *athena.GetQueryRuntimeStatisticsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetQueryRuntimeStatisticsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetQueryRuntimeStatisticsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryRuntimeStatisticsRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetQueryRuntimeStatisticsRequest(_a0 *athena.GetQueryRuntimeStatisticsInput) (*request.Request, *athena.GetQueryRuntimeStatisticsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.GetQueryRuntimeStatisticsOutput
	if rf, ok := ret.Get(0).(func(*athena.GetQueryRuntimeStatisticsInput) (*request.Request, *athena.GetQueryRuntimeStatisticsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetQueryRuntimeStatisticsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetQueryRuntimeStatisticsInput) *athena.GetQueryRuntimeStatisticsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.GetQueryRuntimeStatisticsOutput)
		}
	}

	return r0, r1
}

// GetQueryRuntimeStatisticsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) GetQueryRuntimeStatisticsWithContext(_a0 context.Context, _a1 *athena.GetQueryRuntimeStatisticsInput, _a2 ...request.Option) (*athena.GetQueryRuntimeStatisticsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.GetQueryRuntimeStatisticsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetQueryRuntimeStatisticsInput, ...request.Option) (*athena.GetQueryRuntimeStatisticsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetQueryRuntimeStatisticsInput, ...request.Option) *athena.GetQueryRuntimeStatisticsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetQueryRuntimeStatisticsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetQueryRuntimeStatisticsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSession provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetSession(_a0 *athena.GetSessionInput) (*athena.GetSessionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.GetSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.GetSessionInput) (*athena.GetSessionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetSessionInput) *athena.GetSessionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetSessionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetSessionRequest(_a0 *athena.GetSessionInput) (*request.Request, *athena.GetSessionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.GetSessionOutput
	if rf, ok := ret.Get(0).(func(*athena.GetSessionInput) (*request.Request, *athena.GetSessionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetSessionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetSessionInput) *athena.GetSessionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.GetSessionOutput)
		}
	}

	return r0, r1
}

// GetSessionStatus provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetSessionStatus(_a0 *athena.GetSessionStatusInput) (*athena.GetSessionStatusOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.GetSessionStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.GetSessionStatusInput) (*athena.GetSessionStatusOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetSessionStatusInput) *athena.GetSessionStatusOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetSessionStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetSessionStatusInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionStatusRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetSessionStatusRequest(_a0 *athena.GetSessionStatusInput) (*request.Request, *athena.GetSessionStatusOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.GetSessionStatusOutput
	if rf, ok := ret.Get(0).(func(*athena.GetSessionStatusInput) (*request.Request, *athena.GetSessionStatusOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetSessionStatusInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetSessionStatusInput) *athena.GetSessionStatusOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.GetSessionStatusOutput)
		}
	}

	return r0, r1
}

// GetSessionStatusWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) GetSessionStatusWithContext(_a0 context.Context, _a1 *athena.GetSessionStatusInput, _a2 ...request.Option) (*athena.GetSessionStatusOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.GetSessionStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetSessionStatusInput, ...request.Option) (*athena.GetSessionStatusOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetSessionStatusInput, ...request.Option) *athena.GetSessionStatusOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetSessionStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetSessionStatusInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) GetSessionWithContext(_a0 context.Context, _a1 *athena.GetSessionInput, _a2 ...request.Option) (*athena.GetSessionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.GetSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetSessionInput, ...request.Option) (*athena.GetSessionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetSessionInput, ...request.Option) *athena.GetSessionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetSessionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTableMetadata provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetTableMetadata(_a0 *athena.GetTableMetadataInput) (*athena.GetTableMetadataOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.GetTableMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.GetTableMetadataInput) (*athena.GetTableMetadataOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetTableMetadataInput) *athena.GetTableMetadataOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetTableMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetTableMetadataInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTableMetadataRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetTableMetadataRequest(_a0 *athena.GetTableMetadataInput) (*request.Request, *athena.GetTableMetadataOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.GetTableMetadataOutput
	if rf, ok := ret.Get(0).(func(*athena.GetTableMetadataInput) (*request.Request, *athena.GetTableMetadataOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetTableMetadataInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetTableMetadataInput) *athena.GetTableMetadataOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.GetTableMetadataOutput)
		}
	}

	return r0, r1
}

// GetTableMetadataWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) GetTableMetadataWithContext(_a0 context.Context, _a1 *athena.GetTableMetadataInput, _a2 ...request.Option) (*athena.GetTableMetadataOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.GetTableMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetTableMetadataInput, ...request.Option) (*athena.GetTableMetadataOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetTableMetadataInput, ...request.Option) *athena.GetTableMetadataOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetTableMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetTableMetadataInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkGroup provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetWorkGroup(_a0 *athena.GetWorkGroupInput) (*athena.GetWorkGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.GetWorkGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.GetWorkGroupInput) (*athena.GetWorkGroupOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetWorkGroupInput) *athena.GetWorkGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetWorkGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetWorkGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkGroupRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) GetWorkGroupRequest(_a0 *athena.GetWorkGroupInput) (*request.Request, *athena.GetWorkGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.GetWorkGroupOutput
	if rf, ok := ret.Get(0).(func(*athena.GetWorkGroupInput) (*request.Request, *athena.GetWorkGroupOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.GetWorkGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.GetWorkGroupInput) *athena.GetWorkGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.GetWorkGroupOutput)
		}
	}

	return r0, r1
}

// GetWorkGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) GetWorkGroupWithContext(_a0 context.Context, _a1 *athena.GetWorkGroupInput, _a2 ...request.Option) (*athena.GetWorkGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.GetWorkGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetWorkGroupInput, ...request.Option) (*athena.GetWorkGroupOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetWorkGroupInput, ...request.Option) *athena.GetWorkGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetWorkGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetWorkGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportNotebook provides a mock function with given fields: _a0
func (_m *AthenaAPI) ImportNotebook(_a0 *athena.ImportNotebookInput) (*athena.ImportNotebookOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.ImportNotebookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.ImportNotebookInput) (*athena.ImportNotebookOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ImportNotebookInput) *athena.ImportNotebookOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ImportNotebookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ImportNotebookInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportNotebookRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) ImportNotebookRequest(_a0 *athena.ImportNotebookInput) (*request.Request, *athena.ImportNotebookOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.ImportNotebookOutput
	if rf, ok := ret.Get(0).(func(*athena.ImportNotebookInput) (*request.Request, *athena.ImportNotebookOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ImportNotebookInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ImportNotebookInput) *athena.ImportNotebookOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.ImportNotebookOutput)
		}
	}

	return r0, r1
}

// ImportNotebookWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) ImportNotebookWithContext(_a0 context.Context, _a1 *athena.ImportNotebookInput, _a2 ...request.Option) (*athena.ImportNotebookOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.ImportNotebookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ImportNotebookInput, ...request.Option) (*athena.ImportNotebookOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ImportNotebookInput, ...request.Option) *athena.ImportNotebookOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ImportNotebookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ImportNotebookInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplicationDPUSizes provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListApplicationDPUSizes(_a0 *athena.ListApplicationDPUSizesInput) (*athena.ListApplicationDPUSizesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.ListApplicationDPUSizesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.ListApplicationDPUSizesInput) (*athena.ListApplicationDPUSizesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListApplicationDPUSizesInput) *athena.ListApplicationDPUSizesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListApplicationDPUSizesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListApplicationDPUSizesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplicationDPUSizesPages provides a mock function with given fields: _a0, _a1
func (_m *AthenaAPI) ListApplicationDPUSizesPages(_a0 *athena.ListApplicationDPUSizesInput, _a1 func(*athena.ListApplicationDPUSizesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*athena.ListApplicationDPUSizesInput, func(*athena.ListApplicationDPUSizesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListApplicationDPUSizesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *AthenaAPI) ListApplicationDPUSizesPagesWithContext(_a0 context.Context, _a1 *athena.ListApplicationDPUSizesInput, _a2 func(*athena.ListApplicationDPUSizesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListApplicationDPUSizesInput, func(*athena.ListApplicationDPUSizesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListApplicationDPUSizesRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListApplicationDPUSizesRequest(_a0 *athena.ListApplicationDPUSizesInput) (*request.Request, *athena.ListApplicationDPUSizesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.ListApplicationDPUSizesOutput
	if rf, ok := ret.Get(0).(func(*athena.ListApplicationDPUSizesInput) (*request.Request, *athena.ListApplicationDPUSizesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListApplicationDPUSizesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListApplicationDPUSizesInput) *athena.ListApplicationDPUSizesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.ListApplicationDPUSizesOutput)
		}
	}

	return r0, r1
}

// ListApplicationDPUSizesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) ListApplicationDPUSizesWithContext(_a0 context.Context, _a1 *athena.ListApplicationDPUSizesInput, _a2 ...request.Option) (*athena.ListApplicationDPUSizesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.ListApplicationDPUSizesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListApplicationDPUSizesInput, ...request.Option) (*athena.ListApplicationDPUSizesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListApplicationDPUSizesInput, ...request.Option) *athena.ListApplicationDPUSizesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListApplicationDPUSizesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListApplicationDPUSizesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCalculationExecutions provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListCalculationExecutions(_a0 *athena.ListCalculationExecutionsInput) (*athena.ListCalculationExecutionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.ListCalculationExecutionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.ListCalculationExecutionsInput) (*athena.ListCalculationExecutionsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListCalculationExecutionsInput) *athena.ListCalculationExecutionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListCalculationExecutionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListCalculationExecutionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCalculationExecutionsPages provides a mock function with given fields: _a0, _a1
func (_m *AthenaAPI) ListCalculationExecutionsPages(_a0 *athena.ListCalculationExecutionsInput, _a1 func(*athena.ListCalculationExecutionsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*athena.ListCalculationExecutionsInput, func(*athena.ListCalculationExecutionsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCalculationExecutionsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *AthenaAPI) ListCalculationExecutionsPagesWithContext(_a0 context.Context, _a1 *athena.ListCalculationExecutionsInput, _a2 func(*athena.ListCalculationExecutionsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListCalculationExecutionsInput, func(*athena.ListCalculationExecutionsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCalculationExecutionsRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListCalculationExecutionsRequest(_a0 *athena.ListCalculationExecutionsInput) (*request.Request, *athena.ListCalculationExecutionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.ListCalculationExecutionsOutput
	if rf, ok := ret.Get(0).(func(*athena.ListCalculationExecutionsInput) (*request.Request, *athena.ListCalculationExecutionsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListCalculationExecutionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListCalculationExecutionsInput) *athena.ListCalculationExecutionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.ListCalculationExecutionsOutput)
		}
	}

	return r0, r1
}

// ListCalculationExecutionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) ListCalculationExecutionsWithContext(_a0 context.Context, _a1 *athena.ListCalculationExecutionsInput, _a2 ...request.Option) (*athena.ListCalculationExecutionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.ListCalculationExecutionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListCalculationExecutionsInput, ...request.Option) (*athena.ListCalculationExecutionsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListCalculationExecutionsInput, ...request.Option) *athena.ListCalculationExecutionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListCalculationExecutionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListCalculationExecutionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCapacityReservations provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListCapacityReservations(_a0 *athena.ListCapacityReservationsInput) (*athena.ListCapacityReservationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.ListCapacityReservationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.ListCapacityReservationsInput) (*athena.ListCapacityReservationsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListCapacityReservationsInput) *athena.ListCapacityReservationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListCapacityReservationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListCapacityReservationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCapacityReservationsPages provides a mock function with given fields: _a0, _a1
func (_m *AthenaAPI) ListCapacityReservationsPages(_a0 *athena.ListCapacityReservationsInput, _a1 func(*athena.ListCapacityReservationsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*athena.ListCapacityReservationsInput, func(*athena.ListCapacityReservationsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCapacityReservationsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *AthenaAPI) ListCapacityReservationsPagesWithContext(_a0 context.Context, _a1 *athena.ListCapacityReservationsInput, _a2 func(*athena.ListCapacityReservationsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListCapacityReservationsInput, func(*athena.ListCapacityReservationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCapacityReservationsRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListCapacityReservationsRequest(_a0 *athena.ListCapacityReservationsInput) (*request.Request, *athena.ListCapacityReservationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.ListCapacityReservationsOutput
	if rf, ok := ret.Get(0).(func(*athena.ListCapacityReservationsInput) (*request.Request, *athena.ListCapacityReservationsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListCapacityReservationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListCapacityReservationsInput) *athena.ListCapacityReservationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.ListCapacityReservationsOutput)
		}
	}

	return r0, r1
}

// ListCapacityReservationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) ListCapacityReservationsWithContext(_a0 context.Context, _a1 *athena.ListCapacityReservationsInput, _a2 ...request.Option) (*athena.ListCapacityReservationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.ListCapacityReservationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListCapacityReservationsInput, ...request.Option) (*athena.ListCapacityReservationsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListCapacityReservationsInput, ...request.Option) *athena.ListCapacityReservationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListCapacityReservationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListCapacityReservationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataCatalogs provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListDataCatalogs(_a0 *athena.ListDataCatalogsInput) (*athena.ListDataCatalogsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.ListDataCatalogsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.ListDataCatalogsInput) (*athena.ListDataCatalogsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListDataCatalogsInput) *athena.ListDataCatalogsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListDataCatalogsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListDataCatalogsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataCatalogsPages provides a mock function with given fields: _a0, _a1
func (_m *AthenaAPI) ListDataCatalogsPages(_a0 *athena.ListDataCatalogsInput, _a1 func(*athena.ListDataCatalogsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*athena.ListDataCatalogsInput, func(*athena.ListDataCatalogsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListDataCatalogsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *AthenaAPI) ListDataCatalogsPagesWithContext(_a0 context.Context, _a1 *athena.ListDataCatalogsInput, _a2 func(*athena.ListDataCatalogsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListDataCatalogsInput, func(*athena.ListDataCatalogsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListDataCatalogsRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListDataCatalogsRequest(_a0 *athena.ListDataCatalogsInput) (*request.Request, *athena.ListDataCatalogsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.ListDataCatalogsOutput
	if rf, ok := ret.Get(0).(func(*athena.ListDataCatalogsInput) (*request.Request, *athena.ListDataCatalogsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListDataCatalogsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListDataCatalogsInput) *athena.ListDataCatalogsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.ListDataCatalogsOutput)
		}
	}

	return r0, r1
}

// ListDataCatalogsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) ListDataCatalogsWithContext(_a0 context.Context, _a1 *athena.ListDataCatalogsInput, _a2 ...request.Option) (*athena.ListDataCatalogsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.ListDataCatalogsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListDataCatalogsInput, ...request.Option) (*athena.ListDataCatalogsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListDataCatalogsInput, ...request.Option) *athena.ListDataCatalogsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListDataCatalogsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListDataCatalogsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatabases provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListDatabases(_a0 *athena.ListDatabasesInput) (*athena.ListDatabasesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.ListDatabasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.ListDatabasesInput) (*athena.ListDatabasesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListDatabasesInput) *athena.ListDatabasesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListDatabasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListDatabasesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatabasesPages provides a mock function with given fields: _a0, _a1
func (_m *AthenaAPI) ListDatabasesPages(_a0 *athena.ListDatabasesInput, _a1 func(*athena.ListDatabasesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*athena.ListDatabasesInput, func(*athena.ListDatabasesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListDatabasesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *AthenaAPI) ListDatabasesPagesWithContext(_a0 context.Context, _a1 *athena.ListDatabasesInput, _a2 func(*athena.ListDatabasesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListDatabasesInput, func(*athena.ListDatabasesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListDatabasesRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListDatabasesRequest(_a0 *athena.ListDatabasesInput) (*request.Request, *athena.ListDatabasesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.ListDatabasesOutput
	if rf, ok := ret.Get(0).(func(*athena.ListDatabasesInput) (*request.Request, *athena.ListDatabasesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListDatabasesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListDatabasesInput) *athena.ListDatabasesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.ListDatabasesOutput)
		}
	}

	return r0, r1
}

// ListDatabasesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) ListDatabasesWithContext(_a0 context.Context, _a1 *athena.ListDatabasesInput, _a2 ...request.Option) (*athena.ListDatabasesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.ListDatabasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListDatabasesInput, ...request.Option) (*athena.ListDatabasesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListDatabasesInput, ...request.Option) *athena.ListDatabasesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListDatabasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListDatabasesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEngineVersions provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListEngineVersions(_a0 *athena.ListEngineVersionsInput) (*athena.ListEngineVersionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.ListEngineVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.ListEngineVersionsInput) (*athena.ListEngineVersionsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListEngineVersionsInput) *athena.ListEngineVersionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListEngineVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListEngineVersionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEngineVersionsPages provides a mock function with given fields: _a0, _a1
func (_m *AthenaAPI) ListEngineVersionsPages(_a0 *athena.ListEngineVersionsInput, _a1 func(*athena.ListEngineVersionsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*athena.ListEngineVersionsInput, func(*athena.ListEngineVersionsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListEngineVersionsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *AthenaAPI) ListEngineVersionsPagesWithContext(_a0 context.Context, _a1 *athena.ListEngineVersionsInput, _a2 func(*athena.ListEngineVersionsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListEngineVersionsInput, func(*athena.ListEngineVersionsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListEngineVersionsRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListEngineVersionsRequest(_a0 *athena.ListEngineVersionsInput) (*request.Request, *athena.ListEngineVersionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.ListEngineVersionsOutput
	if rf, ok := ret.Get(0).(func(*athena.ListEngineVersionsInput) (*request.Request, *athena.ListEngineVersionsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListEngineVersionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListEngineVersionsInput) *athena.ListEngineVersionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.ListEngineVersionsOutput)
		}
	}

	return r0, r1
}

// ListEngineVersionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) ListEngineVersionsWithContext(_a0 context.Context, _a1 *athena.ListEngineVersionsInput, _a2 ...request.Option) (*athena.ListEngineVersionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.ListEngineVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListEngineVersionsInput, ...request.Option) (*athena.ListEngineVersionsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListEngineVersionsInput, ...request.Option) *athena.ListEngineVersionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListEngineVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListEngineVersionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExecutors provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListExecutors(_a0 *athena.ListExecutorsInput) (*athena.ListExecutorsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.ListExecutorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.ListExecutorsInput) (*athena.ListExecutorsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListExecutorsInput) *athena.ListExecutorsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListExecutorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListExecutorsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExecutorsPages provides a mock function with given fields: _a0, _a1
func (_m *AthenaAPI) ListExecutorsPages(_a0 *athena.ListExecutorsInput, _a1 func(*athena.ListExecutorsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*athena.ListExecutorsInput, func(*athena.ListExecutorsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListExecutorsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *AthenaAPI) ListExecutorsPagesWithContext(_a0 context.Context, _a1 *athena.ListExecutorsInput, _a2 func(*athena.ListExecutorsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListExecutorsInput, func(*athena.ListExecutorsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListExecutorsRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListExecutorsRequest(_a0 *athena.ListExecutorsInput) (*request.Request, *athena.ListExecutorsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.ListExecutorsOutput
	if rf, ok := ret.Get(0).(func(*athena.ListExecutorsInput) (*request.Request, *athena.ListExecutorsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListExecutorsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListExecutorsInput) *athena.ListExecutorsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.ListExecutorsOutput)
		}
	}

	return r0, r1
}

// ListExecutorsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) ListExecutorsWithContext(_a0 context.Context, _a1 *athena.ListExecutorsInput, _a2 ...request.Option) (*athena.ListExecutorsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.ListExecutorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListExecutorsInput, ...request.Option) (*athena.ListExecutorsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListExecutorsInput, ...request.Option) *athena.ListExecutorsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListExecutorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListExecutorsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNamedQueries provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListNamedQueries(_a0 *athena.ListNamedQueriesInput) (*athena.ListNamedQueriesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.ListNamedQueriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.ListNamedQueriesInput) (*athena.ListNamedQueriesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListNamedQueriesInput) *athena.ListNamedQueriesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListNamedQueriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListNamedQueriesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNamedQueriesPages provides a mock function with given fields: _a0, _a1
func (_m *AthenaAPI) ListNamedQueriesPages(_a0 *athena.ListNamedQueriesInput, _a1 func(*athena.ListNamedQueriesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*athena.ListNamedQueriesInput, func(*athena.ListNamedQueriesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListNamedQueriesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *AthenaAPI) ListNamedQueriesPagesWithContext(_a0 context.Context, _a1 *athena.ListNamedQueriesInput, _a2 func(*athena.ListNamedQueriesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListNamedQueriesInput, func(*athena.ListNamedQueriesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListNamedQueriesRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListNamedQueriesRequest(_a0 *athena.ListNamedQueriesInput) (*request.Request, *athena.ListNamedQueriesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.ListNamedQueriesOutput
	if rf, ok := ret.Get(0).(func(*athena.ListNamedQueriesInput) (*request.Request, *athena.ListNamedQueriesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListNamedQueriesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListNamedQueriesInput) *athena.ListNamedQueriesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.ListNamedQueriesOutput)
		}
	}

	return r0, r1
}

// ListNamedQueriesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) ListNamedQueriesWithContext(_a0 context.Context, _a1 *athena.ListNamedQueriesInput, _a2 ...request.Option) (*athena.ListNamedQueriesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.ListNamedQueriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListNamedQueriesInput, ...request.Option) (*athena.ListNamedQueriesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListNamedQueriesInput, ...request.Option) *athena.ListNamedQueriesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListNamedQueriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListNamedQueriesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNotebookMetadata provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListNotebookMetadata(_a0 *athena.ListNotebookMetadataInput) (*athena.ListNotebookMetadataOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.ListNotebookMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.ListNotebookMetadataInput) (*athena.ListNotebookMetadataOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListNotebookMetadataInput) *athena.ListNotebookMetadataOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListNotebookMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListNotebookMetadataInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNotebookMetadataRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListNotebookMetadataRequest(_a0 *athena.ListNotebookMetadataInput) (*request.Request, *athena.ListNotebookMetadataOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.ListNotebookMetadataOutput
	if rf, ok := ret.Get(0).(func(*athena.ListNotebookMetadataInput) (*request.Request, *athena.ListNotebookMetadataOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListNotebookMetadataInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListNotebookMetadataInput) *athena.ListNotebookMetadataOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.ListNotebookMetadataOutput)
		}
	}

	return r0, r1
}

// ListNotebookMetadataWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) ListNotebookMetadataWithContext(_a0 context.Context, _a1 *athena.ListNotebookMetadataInput, _a2 ...request.Option) (*athena.ListNotebookMetadataOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.ListNotebookMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListNotebookMetadataInput, ...request.Option) (*athena.ListNotebookMetadataOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListNotebookMetadataInput, ...request.Option) *athena.ListNotebookMetadataOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListNotebookMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListNotebookMetadataInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNotebookSessions provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListNotebookSessions(_a0 *athena.ListNotebookSessionsInput) (*athena.ListNotebookSessionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.ListNotebookSessionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.ListNotebookSessionsInput) (*athena.ListNotebookSessionsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListNotebookSessionsInput) *athena.ListNotebookSessionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListNotebookSessionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListNotebookSessionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNotebookSessionsRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListNotebookSessionsRequest(_a0 *athena.ListNotebookSessionsInput) (*request.Request, *athena.ListNotebookSessionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.ListNotebookSessionsOutput
	if rf, ok := ret.Get(0).(func(*athena.ListNotebookSessionsInput) (*request.Request, *athena.ListNotebookSessionsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListNotebookSessionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListNotebookSessionsInput) *athena.ListNotebookSessionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.ListNotebookSessionsOutput)
		}
	}

	return r0, r1
}

// ListNotebookSessionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) ListNotebookSessionsWithContext(_a0 context.Context, _a1 *athena.ListNotebookSessionsInput, _a2 ...request.Option) (*athena.ListNotebookSessionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.ListNotebookSessionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListNotebookSessionsInput, ...request.Option) (*athena.ListNotebookSessionsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListNotebookSessionsInput, ...request.Option) *athena.ListNotebookSessionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListNotebookSessionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListNotebookSessionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPreparedStatements provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListPreparedStatements(_a0 *athena.ListPreparedStatementsInput) (*athena.ListPreparedStatementsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.ListPreparedStatementsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.ListPreparedStatementsInput) (*athena.ListPreparedStatementsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListPreparedStatementsInput) *athena.ListPreparedStatementsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListPreparedStatementsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListPreparedStatementsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPreparedStatementsPages provides a mock function with given fields: _a0, _a1
func (_m *AthenaAPI) ListPreparedStatementsPages(_a0 *athena.ListPreparedStatementsInput, _a1 func(*athena.ListPreparedStatementsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*athena.ListPreparedStatementsInput, func(*athena.ListPreparedStatementsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListPreparedStatementsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *AthenaAPI) ListPreparedStatementsPagesWithContext(_a0 context.Context, _a1 *athena.ListPreparedStatementsInput, _a2 func(*athena.ListPreparedStatementsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListPreparedStatementsInput, func(*athena.ListPreparedStatementsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListPreparedStatementsRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListPreparedStatementsRequest(_a0 *athena.ListPreparedStatementsInput) (*request.Request, *athena.ListPreparedStatementsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.ListPreparedStatementsOutput
	if rf, ok := ret.Get(0).(func(*athena.ListPreparedStatementsInput) (*request.Request, *athena.ListPreparedStatementsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListPreparedStatementsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListPreparedStatementsInput) *athena.ListPreparedStatementsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.ListPreparedStatementsOutput)
		}
	}

	return r0, r1
}

// ListPreparedStatementsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) ListPreparedStatementsWithContext(_a0 context.Context, _a1 *athena.ListPreparedStatementsInput, _a2 ...request.Option) (*athena.ListPreparedStatementsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.ListPreparedStatementsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListPreparedStatementsInput, ...request.Option) (*athena.ListPreparedStatementsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListPreparedStatementsInput, ...request.Option) *athena.ListPreparedStatementsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListPreparedStatementsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListPreparedStatementsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListQueryExecutions provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListQueryExecutions(_a0 *athena.ListQueryExecutionsInput) (*athena.ListQueryExecutionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.ListQueryExecutionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.ListQueryExecutionsInput) (*athena.ListQueryExecutionsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListQueryExecutionsInput) *athena.ListQueryExecutionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListQueryExecutionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListQueryExecutionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListQueryExecutionsPages provides a mock function with given fields: _a0, _a1
func (_m *AthenaAPI) ListQueryExecutionsPages(_a0 *athena.ListQueryExecutionsInput, _a1 func(*athena.ListQueryExecutionsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*athena.ListQueryExecutionsInput, func(*athena.ListQueryExecutionsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListQueryExecutionsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *AthenaAPI) ListQueryExecutionsPagesWithContext(_a0 context.Context, _a1 *athena.ListQueryExecutionsInput, _a2 func(*athena.ListQueryExecutionsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListQueryExecutionsInput, func(*athena.ListQueryExecutionsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListQueryExecutionsRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListQueryExecutionsRequest(_a0 *athena.ListQueryExecutionsInput) (*request.Request, *athena.ListQueryExecutionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.ListQueryExecutionsOutput
	if rf, ok := ret.Get(0).(func(*athena.ListQueryExecutionsInput) (*request.Request, *athena.ListQueryExecutionsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListQueryExecutionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListQueryExecutionsInput) *athena.ListQueryExecutionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.ListQueryExecutionsOutput)
		}
	}

	return r0, r1
}

// ListQueryExecutionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) ListQueryExecutionsWithContext(_a0 context.Context, _a1 *athena.ListQueryExecutionsInput, _a2 ...request.Option) (*athena.ListQueryExecutionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.ListQueryExecutionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListQueryExecutionsInput, ...request.Option) (*athena.ListQueryExecutionsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListQueryExecutionsInput, ...request.Option) *athena.ListQueryExecutionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListQueryExecutionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListQueryExecutionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSessions provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListSessions(_a0 *athena.ListSessionsInput) (*athena.ListSessionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.ListSessionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.ListSessionsInput) (*athena.ListSessionsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListSessionsInput) *athena.ListSessionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListSessionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListSessionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSessionsPages provides a mock function with given fields: _a0, _a1
func (_m *AthenaAPI) ListSessionsPages(_a0 *athena.ListSessionsInput, _a1 func(*athena.ListSessionsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*athena.ListSessionsInput, func(*athena.ListSessionsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListSessionsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *AthenaAPI) ListSessionsPagesWithContext(_a0 context.Context, _a1 *athena.ListSessionsInput, _a2 func(*athena.ListSessionsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListSessionsInput, func(*athena.ListSessionsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListSessionsRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListSessionsRequest(_a0 *athena.ListSessionsInput) (*request.Request, *athena.ListSessionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.ListSessionsOutput
	if rf, ok := ret.Get(0).(func(*athena.ListSessionsInput) (*request.Request, *athena.ListSessionsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListSessionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListSessionsInput) *athena.ListSessionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.ListSessionsOutput)
		}
	}

	return r0, r1
}

// ListSessionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) ListSessionsWithContext(_a0 context.Context, _a1 *athena.ListSessionsInput, _a2 ...request.Option) (*athena.ListSessionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.ListSessionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListSessionsInput, ...request.Option) (*athena.ListSessionsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListSessionsInput, ...request.Option) *athena.ListSessionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListSessionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListSessionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTableMetadata provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListTableMetadata(_a0 *athena.ListTableMetadataInput) (*athena.ListTableMetadataOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.ListTableMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.ListTableMetadataInput) (*athena.ListTableMetadataOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListTableMetadataInput) *athena.ListTableMetadataOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListTableMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListTableMetadataInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTableMetadataPages provides a mock function with given fields: _a0, _a1
func (_m *AthenaAPI) ListTableMetadataPages(_a0 *athena.ListTableMetadataInput, _a1 func(*athena.ListTableMetadataOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*athena.ListTableMetadataInput, func(*athena.ListTableMetadataOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListTableMetadataPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *AthenaAPI) ListTableMetadataPagesWithContext(_a0 context.Context, _a1 *athena.ListTableMetadataInput, _a2 func(*athena.ListTableMetadataOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListTableMetadataInput, func(*athena.ListTableMetadataOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListTableMetadataRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListTableMetadataRequest(_a0 *athena.ListTableMetadataInput) (*request.Request, *athena.ListTableMetadataOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.ListTableMetadataOutput
	if rf, ok := ret.Get(0).(func(*athena.ListTableMetadataInput) (*request.Request, *athena.ListTableMetadataOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListTableMetadataInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListTableMetadataInput) *athena.ListTableMetadataOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.ListTableMetadataOutput)
		}
	}

	return r0, r1
}

// ListTableMetadataWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) ListTableMetadataWithContext(_a0 context.Context, _a1 *athena.ListTableMetadataInput, _a2 ...request.Option) (*athena.ListTableMetadataOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.ListTableMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListTableMetadataInput, ...request.Option) (*athena.ListTableMetadataOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListTableMetadataInput, ...request.Option) *athena.ListTableMetadataOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListTableMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListTableMetadataInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListTagsForResource(_a0 *athena.ListTagsForResourceInput) (*athena.ListTagsForResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.ListTagsForResourceInput) (*athena.ListTagsForResourceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListTagsForResourceInput) *athena.ListTagsForResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListTagsForResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResourcePages provides a mock function with given fields: _a0, _a1
func (_m *AthenaAPI) ListTagsForResourcePages(_a0 *athena.ListTagsForResourceInput, _a1 func(*athena.ListTagsForResourceOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*athena.ListTagsForResourceInput, func(*athena.ListTagsForResourceOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListTagsForResourcePagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *AthenaAPI) ListTagsForResourcePagesWithContext(_a0 context.Context, _a1 *athena.ListTagsForResourceInput, _a2 func(*athena.ListTagsForResourceOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListTagsForResourceInput, func(*athena.ListTagsForResourceOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListTagsForResourceRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListTagsForResourceRequest(_a0 *athena.ListTagsForResourceInput) (*request.Request, *athena.ListTagsForResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(*athena.ListTagsForResourceInput) (*request.Request, *athena.ListTagsForResourceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListTagsForResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListTagsForResourceInput) *athena.ListTagsForResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.ListTagsForResourceOutput)
		}
	}

	return r0, r1
}

// ListTagsForResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) ListTagsForResourceWithContext(_a0 context.Context, _a1 *athena.ListTagsForResourceInput, _a2 ...request.Option) (*athena.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListTagsForResourceInput, ...request.Option) (*athena.ListTagsForResourceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListTagsForResourceInput, ...request.Option) *athena.ListTagsForResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListTagsForResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkGroups provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListWorkGroups(_a0 *athena.ListWorkGroupsInput) (*athena.ListWorkGroupsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.ListWorkGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.ListWorkGroupsInput) (*athena.ListWorkGroupsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListWorkGroupsInput) *athena.ListWorkGroupsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListWorkGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListWorkGroupsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkGroupsPages provides a mock function with given fields: _a0, _a1
func (_m *AthenaAPI) ListWorkGroupsPages(_a0 *athena.ListWorkGroupsInput, _a1 func(*athena.ListWorkGroupsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*athena.ListWorkGroupsInput, func(*athena.ListWorkGroupsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListWorkGroupsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *AthenaAPI) ListWorkGroupsPagesWithContext(_a0 context.Context, _a1 *athena.ListWorkGroupsInput, _a2 func(*athena.ListWorkGroupsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListWorkGroupsInput, func(*athena.ListWorkGroupsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListWorkGroupsRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) ListWorkGroupsRequest(_a0 *athena.ListWorkGroupsInput) (*request.Request, *athena.ListWorkGroupsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.ListWorkGroupsOutput
	if rf, ok := ret.Get(0).(func(*athena.ListWorkGroupsInput) (*request.Request, *athena.ListWorkGroupsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.ListWorkGroupsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.ListWorkGroupsInput) *athena.ListWorkGroupsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.ListWorkGroupsOutput)
		}
	}

	return r0, r1
}

// ListWorkGroupsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) ListWorkGroupsWithContext(_a0 context.Context, _a1 *athena.ListWorkGroupsInput, _a2 ...request.Option) (*athena.ListWorkGroupsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.ListWorkGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListWorkGroupsInput, ...request.Option) (*athena.ListWorkGroupsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListWorkGroupsInput, ...request.Option) *athena.ListWorkGroupsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListWorkGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListWorkGroupsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutCapacityAssignmentConfiguration provides a mock function with given fields: _a0
func (_m *AthenaAPI) PutCapacityAssignmentConfiguration(_a0 *athena.PutCapacityAssignmentConfigurationInput) (*athena.PutCapacityAssignmentConfigurationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.PutCapacityAssignmentConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.PutCapacityAssignmentConfigurationInput) (*athena.PutCapacityAssignmentConfigurationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.PutCapacityAssignmentConfigurationInput) *athena.PutCapacityAssignmentConfigurationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.PutCapacityAssignmentConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.PutCapacityAssignmentConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutCapacityAssignmentConfigurationRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) PutCapacityAssignmentConfigurationRequest(_a0 *athena.PutCapacityAssignmentConfigurationInput) (*request.Request, *athena.PutCapacityAssignmentConfigurationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.PutCapacityAssignmentConfigurationOutput
	if rf, ok := ret.Get(0).(func(*athena.PutCapacityAssignmentConfigurationInput) (*request.Request, *athena.PutCapacityAssignmentConfigurationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.PutCapacityAssignmentConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.PutCapacityAssignmentConfigurationInput) *athena.PutCapacityAssignmentConfigurationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.PutCapacityAssignmentConfigurationOutput)
		}
	}

	return r0, r1
}

// PutCapacityAssignmentConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) PutCapacityAssignmentConfigurationWithContext(_a0 context.Context, _a1 *athena.PutCapacityAssignmentConfigurationInput, _a2 ...request.Option) (*athena.PutCapacityAssignmentConfigurationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.PutCapacityAssignmentConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.PutCapacityAssignmentConfigurationInput, ...request.Option) (*athena.PutCapacityAssignmentConfigurationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.PutCapacityAssignmentConfigurationInput, ...request.Option) *athena.PutCapacityAssignmentConfigurationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.PutCapacityAssignmentConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.PutCapacityAssignmentConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartCalculationExecution provides a mock function with given fields: _a0
func (_m *AthenaAPI) StartCalculationExecution(_a0 *athena.StartCalculationExecutionInput) (*athena.StartCalculationExecutionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.StartCalculationExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.StartCalculationExecutionInput) (*athena.StartCalculationExecutionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.StartCalculationExecutionInput) *athena.StartCalculationExecutionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.StartCalculationExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.StartCalculationExecutionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartCalculationExecutionRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) StartCalculationExecutionRequest(_a0 *athena.StartCalculationExecutionInput) (*request.Request, *athena.StartCalculationExecutionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.StartCalculationExecutionOutput
	if rf, ok := ret.Get(0).(func(*athena.StartCalculationExecutionInput) (*request.Request, *athena.StartCalculationExecutionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.StartCalculationExecutionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.StartCalculationExecutionInput) *athena.StartCalculationExecutionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.StartCalculationExecutionOutput)
		}
	}

	return r0, r1
}

// StartCalculationExecutionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) StartCalculationExecutionWithContext(_a0 context.Context, _a1 *athena.StartCalculationExecutionInput, _a2 ...request.Option) (*athena.StartCalculationExecutionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.StartCalculationExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.StartCalculationExecutionInput, ...request.Option) (*athena.StartCalculationExecutionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.StartCalculationExecutionInput, ...request.Option) *athena.StartCalculationExecutionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.StartCalculationExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.StartCalculationExecutionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartQueryExecution provides a mock function with given fields: _a0
func (_m *AthenaAPI) StartQueryExecution(_a0 *athena.StartQueryExecutionInput) (*athena.StartQueryExecutionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.StartQueryExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.StartQueryExecutionInput) (*athena.StartQueryExecutionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.StartQueryExecutionInput) *athena.StartQueryExecutionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.StartQueryExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.StartQueryExecutionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartQueryExecutionRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) StartQueryExecutionRequest(_a0 *athena.StartQueryExecutionInput) (*request.Request, *athena.StartQueryExecutionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.StartQueryExecutionOutput
	if rf, ok := ret.Get(0).(func(*athena.StartQueryExecutionInput) (*request.Request, *athena.StartQueryExecutionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.StartQueryExecutionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.StartQueryExecutionInput) *athena.StartQueryExecutionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.StartQueryExecutionOutput)
		}
	}

	return r0, r1
}

// StartQueryExecutionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) StartQueryExecutionWithContext(_a0 context.Context, _a1 *athena.StartQueryExecutionInput, _a2 ...request.Option) (*athena.StartQueryExecutionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.StartQueryExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.StartQueryExecutionInput, ...request.Option) (*athena.StartQueryExecutionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.StartQueryExecutionInput, ...request.Option) *athena.StartQueryExecutionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.StartQueryExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.StartQueryExecutionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartSession provides a mock function with given fields: _a0
func (_m *AthenaAPI) StartSession(_a0 *athena.StartSessionInput) (*athena.StartSessionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.StartSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.StartSessionInput) (*athena.StartSessionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.StartSessionInput) *athena.StartSessionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.StartSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.StartSessionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartSessionRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) StartSessionRequest(_a0 *athena.StartSessionInput) (*request.Request, *athena.StartSessionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.StartSessionOutput
	if rf, ok := ret.Get(0).(func(*athena.StartSessionInput) (*request.Request, *athena.StartSessionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.StartSessionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.StartSessionInput) *athena.StartSessionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.StartSessionOutput)
		}
	}

	return r0, r1
}

// StartSessionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) StartSessionWithContext(_a0 context.Context, _a1 *athena.StartSessionInput, _a2 ...request.Option) (*athena.StartSessionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.StartSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.StartSessionInput, ...request.Option) (*athena.StartSessionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.StartSessionInput, ...request.Option) *athena.StartSessionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.StartSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.StartSessionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopCalculationExecution provides a mock function with given fields: _a0
func (_m *AthenaAPI) StopCalculationExecution(_a0 *athena.StopCalculationExecutionInput) (*athena.StopCalculationExecutionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.StopCalculationExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.StopCalculationExecutionInput) (*athena.StopCalculationExecutionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.StopCalculationExecutionInput) *athena.StopCalculationExecutionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.StopCalculationExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.StopCalculationExecutionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopCalculationExecutionRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) StopCalculationExecutionRequest(_a0 *athena.StopCalculationExecutionInput) (*request.Request, *athena.StopCalculationExecutionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.StopCalculationExecutionOutput
	if rf, ok := ret.Get(0).(func(*athena.StopCalculationExecutionInput) (*request.Request, *athena.StopCalculationExecutionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.StopCalculationExecutionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.StopCalculationExecutionInput) *athena.StopCalculationExecutionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.StopCalculationExecutionOutput)
		}
	}

	return r0, r1
}

// StopCalculationExecutionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) StopCalculationExecutionWithContext(_a0 context.Context, _a1 *athena.StopCalculationExecutionInput, _a2 ...request.Option) (*athena.StopCalculationExecutionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.StopCalculationExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.StopCalculationExecutionInput, ...request.Option) (*athena.StopCalculationExecutionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.StopCalculationExecutionInput, ...request.Option) *athena.StopCalculationExecutionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.StopCalculationExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.StopCalculationExecutionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopQueryExecution provides a mock function with given fields: _a0
func (_m *AthenaAPI) StopQueryExecution(_a0 *athena.StopQueryExecutionInput) (*athena.StopQueryExecutionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.StopQueryExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.StopQueryExecutionInput) (*athena.StopQueryExecutionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.StopQueryExecutionInput) *athena.StopQueryExecutionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.StopQueryExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.StopQueryExecutionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopQueryExecutionRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) StopQueryExecutionRequest(_a0 *athena.StopQueryExecutionInput) (*request.Request, *athena.StopQueryExecutionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.StopQueryExecutionOutput
	if rf, ok := ret.Get(0).(func(*athena.StopQueryExecutionInput) (*request.Request, *athena.StopQueryExecutionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.StopQueryExecutionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.StopQueryExecutionInput) *athena.StopQueryExecutionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.StopQueryExecutionOutput)
		}
	}

	return r0, r1
}

// StopQueryExecutionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) StopQueryExecutionWithContext(_a0 context.Context, _a1 *athena.StopQueryExecutionInput, _a2 ...request.Option) (*athena.StopQueryExecutionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.StopQueryExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.StopQueryExecutionInput, ...request.Option) (*athena.StopQueryExecutionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.StopQueryExecutionInput, ...request.Option) *athena.StopQueryExecutionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.StopQueryExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.StopQueryExecutionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: _a0
func (_m *AthenaAPI) TagResource(_a0 *athena.TagResourceInput) (*athena.TagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.TagResourceInput) (*athena.TagResourceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.TagResourceInput) *athena.TagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.TagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResourceRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) TagResourceRequest(_a0 *athena.TagResourceInput) (*request.Request, *athena.TagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.TagResourceOutput
	if rf, ok := ret.Get(0).(func(*athena.TagResourceInput) (*request.Request, *athena.TagResourceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.TagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.TagResourceInput) *athena.TagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.TagResourceOutput)
		}
	}

	return r0, r1
}

// TagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) TagResourceWithContext(_a0 context.Context, _a1 *athena.TagResourceInput, _a2 ...request.Option) (*athena.TagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.TagResourceInput, ...request.Option) (*athena.TagResourceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.TagResourceInput, ...request.Option) *athena.TagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.TagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateSession provides a mock function with given fields: _a0
func (_m *AthenaAPI) TerminateSession(_a0 *athena.TerminateSessionInput) (*athena.TerminateSessionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.TerminateSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.TerminateSessionInput) (*athena.TerminateSessionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.TerminateSessionInput) *athena.TerminateSessionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.TerminateSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.TerminateSessionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateSessionRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) TerminateSessionRequest(_a0 *athena.TerminateSessionInput) (*request.Request, *athena.TerminateSessionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.TerminateSessionOutput
	if rf, ok := ret.Get(0).(func(*athena.TerminateSessionInput) (*request.Request, *athena.TerminateSessionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.TerminateSessionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.TerminateSessionInput) *athena.TerminateSessionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.TerminateSessionOutput)
		}
	}

	return r0, r1
}

// TerminateSessionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) TerminateSessionWithContext(_a0 context.Context, _a1 *athena.TerminateSessionInput, _a2 ...request.Option) (*athena.TerminateSessionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.TerminateSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.TerminateSessionInput, ...request.Option) (*athena.TerminateSessionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.TerminateSessionInput, ...request.Option) *athena.TerminateSessionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.TerminateSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.TerminateSessionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: _a0
func (_m *AthenaAPI) UntagResource(_a0 *athena.UntagResourceInput) (*athena.UntagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.UntagResourceInput) (*athena.UntagResourceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.UntagResourceInput) *athena.UntagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.UntagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResourceRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) UntagResourceRequest(_a0 *athena.UntagResourceInput) (*request.Request, *athena.UntagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(*athena.UntagResourceInput) (*request.Request, *athena.UntagResourceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.UntagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.UntagResourceInput) *athena.UntagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.UntagResourceOutput)
		}
	}

	return r0, r1
}

// UntagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) UntagResourceWithContext(_a0 context.Context, _a1 *athena.UntagResourceInput, _a2 ...request.Option) (*athena.UntagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UntagResourceInput, ...request.Option) (*athena.UntagResourceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UntagResourceInput, ...request.Option) *athena.UntagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.UntagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCapacityReservation provides a mock function with given fields: _a0
func (_m *AthenaAPI) UpdateCapacityReservation(_a0 *athena.UpdateCapacityReservationInput) (*athena.UpdateCapacityReservationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.UpdateCapacityReservationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.UpdateCapacityReservationInput) (*athena.UpdateCapacityReservationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.UpdateCapacityReservationInput) *athena.UpdateCapacityReservationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UpdateCapacityReservationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.UpdateCapacityReservationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCapacityReservationRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) UpdateCapacityReservationRequest(_a0 *athena.UpdateCapacityReservationInput) (*request.Request, *athena.UpdateCapacityReservationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.UpdateCapacityReservationOutput
	if rf, ok := ret.Get(0).(func(*athena.UpdateCapacityReservationInput) (*request.Request, *athena.UpdateCapacityReservationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.UpdateCapacityReservationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.UpdateCapacityReservationInput) *athena.UpdateCapacityReservationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.UpdateCapacityReservationOutput)
		}
	}

	return r0, r1
}

// UpdateCapacityReservationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) UpdateCapacityReservationWithContext(_a0 context.Context, _a1 *athena.UpdateCapacityReservationInput, _a2 ...request.Option) (*athena.UpdateCapacityReservationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.UpdateCapacityReservationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateCapacityReservationInput, ...request.Option) (*athena.UpdateCapacityReservationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateCapacityReservationInput, ...request.Option) *athena.UpdateCapacityReservationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UpdateCapacityReservationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.UpdateCapacityReservationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDataCatalog provides a mock function with given fields: _a0
func (_m *AthenaAPI) UpdateDataCatalog(_a0 *athena.UpdateDataCatalogInput) (*athena.UpdateDataCatalogOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.UpdateDataCatalogOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.UpdateDataCatalogInput) (*athena.UpdateDataCatalogOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.UpdateDataCatalogInput) *athena.UpdateDataCatalogOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UpdateDataCatalogOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.UpdateDataCatalogInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDataCatalogRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) UpdateDataCatalogRequest(_a0 *athena.UpdateDataCatalogInput) (*request.Request, *athena.UpdateDataCatalogOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.UpdateDataCatalogOutput
	if rf, ok := ret.Get(0).(func(*athena.UpdateDataCatalogInput) (*request.Request, *athena.UpdateDataCatalogOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.UpdateDataCatalogInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.UpdateDataCatalogInput) *athena.UpdateDataCatalogOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.UpdateDataCatalogOutput)
		}
	}

	return r0, r1
}

// UpdateDataCatalogWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) UpdateDataCatalogWithContext(_a0 context.Context, _a1 *athena.UpdateDataCatalogInput, _a2 ...request.Option) (*athena.UpdateDataCatalogOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.UpdateDataCatalogOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateDataCatalogInput, ...request.Option) (*athena.UpdateDataCatalogOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateDataCatalogInput, ...request.Option) *athena.UpdateDataCatalogOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UpdateDataCatalogOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.UpdateDataCatalogInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNamedQuery provides a mock function with given fields: _a0
func (_m *AthenaAPI) UpdateNamedQuery(_a0 *athena.UpdateNamedQueryInput) (*athena.UpdateNamedQueryOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.UpdateNamedQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.UpdateNamedQueryInput) (*athena.UpdateNamedQueryOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.UpdateNamedQueryInput) *athena.UpdateNamedQueryOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UpdateNamedQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.UpdateNamedQueryInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNamedQueryRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) UpdateNamedQueryRequest(_a0 *athena.UpdateNamedQueryInput) (*request.Request, *athena.UpdateNamedQueryOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.UpdateNamedQueryOutput
	if rf, ok := ret.Get(0).(func(*athena.UpdateNamedQueryInput) (*request.Request, *athena.UpdateNamedQueryOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.UpdateNamedQueryInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.UpdateNamedQueryInput) *athena.UpdateNamedQueryOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.UpdateNamedQueryOutput)
		}
	}

	return r0, r1
}

// UpdateNamedQueryWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) UpdateNamedQueryWithContext(_a0 context.Context, _a1 *athena.UpdateNamedQueryInput, _a2 ...request.Option) (*athena.UpdateNamedQueryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.UpdateNamedQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateNamedQueryInput, ...request.Option) (*athena.UpdateNamedQueryOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateNamedQueryInput, ...request.Option) *athena.UpdateNamedQueryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UpdateNamedQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.UpdateNamedQueryInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNotebook provides a mock function with given fields: _a0
func (_m *AthenaAPI) UpdateNotebook(_a0 *athena.UpdateNotebookInput) (*athena.UpdateNotebookOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.UpdateNotebookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.UpdateNotebookInput) (*athena.UpdateNotebookOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.UpdateNotebookInput) *athena.UpdateNotebookOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UpdateNotebookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.UpdateNotebookInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNotebookMetadata provides a mock function with given fields: _a0
func (_m *AthenaAPI) UpdateNotebookMetadata(_a0 *athena.UpdateNotebookMetadataInput) (*athena.UpdateNotebookMetadataOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.UpdateNotebookMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.UpdateNotebookMetadataInput) (*athena.UpdateNotebookMetadataOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.UpdateNotebookMetadataInput) *athena.UpdateNotebookMetadataOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UpdateNotebookMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.UpdateNotebookMetadataInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNotebookMetadataRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) UpdateNotebookMetadataRequest(_a0 *athena.UpdateNotebookMetadataInput) (*request.Request, *athena.UpdateNotebookMetadataOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.UpdateNotebookMetadataOutput
	if rf, ok := ret.Get(0).(func(*athena.UpdateNotebookMetadataInput) (*request.Request, *athena.UpdateNotebookMetadataOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.UpdateNotebookMetadataInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.UpdateNotebookMetadataInput) *athena.UpdateNotebookMetadataOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.UpdateNotebookMetadataOutput)
		}
	}

	return r0, r1
}

// UpdateNotebookMetadataWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) UpdateNotebookMetadataWithContext(_a0 context.Context, _a1 *athena.UpdateNotebookMetadataInput, _a2 ...request.Option) (*athena.UpdateNotebookMetadataOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.UpdateNotebookMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateNotebookMetadataInput, ...request.Option) (*athena.UpdateNotebookMetadataOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateNotebookMetadataInput, ...request.Option) *athena.UpdateNotebookMetadataOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UpdateNotebookMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.UpdateNotebookMetadataInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNotebookRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) UpdateNotebookRequest(_a0 *athena.UpdateNotebookInput) (*request.Request, *athena.UpdateNotebookOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.UpdateNotebookOutput
	if rf, ok := ret.Get(0).(func(*athena.UpdateNotebookInput) (*request.Request, *athena.UpdateNotebookOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.UpdateNotebookInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.UpdateNotebookInput) *athena.UpdateNotebookOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.UpdateNotebookOutput)
		}
	}

	return r0, r1
}

// UpdateNotebookWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) UpdateNotebookWithContext(_a0 context.Context, _a1 *athena.UpdateNotebookInput, _a2 ...request.Option) (*athena.UpdateNotebookOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.UpdateNotebookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateNotebookInput, ...request.Option) (*athena.UpdateNotebookOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateNotebookInput, ...request.Option) *athena.UpdateNotebookOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UpdateNotebookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.UpdateNotebookInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePreparedStatement provides a mock function with given fields: _a0
func (_m *AthenaAPI) UpdatePreparedStatement(_a0 *athena.UpdatePreparedStatementInput) (*athena.UpdatePreparedStatementOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.UpdatePreparedStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.UpdatePreparedStatementInput) (*athena.UpdatePreparedStatementOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.UpdatePreparedStatementInput) *athena.UpdatePreparedStatementOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UpdatePreparedStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.UpdatePreparedStatementInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePreparedStatementRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) UpdatePreparedStatementRequest(_a0 *athena.UpdatePreparedStatementInput) (*request.Request, *athena.UpdatePreparedStatementOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.UpdatePreparedStatementOutput
	if rf, ok := ret.Get(0).(func(*athena.UpdatePreparedStatementInput) (*request.Request, *athena.UpdatePreparedStatementOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.UpdatePreparedStatementInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.UpdatePreparedStatementInput) *athena.UpdatePreparedStatementOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.UpdatePreparedStatementOutput)
		}
	}

	return r0, r1
}

// UpdatePreparedStatementWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) UpdatePreparedStatementWithContext(_a0 context.Context, _a1 *athena.UpdatePreparedStatementInput, _a2 ...request.Option) (*athena.UpdatePreparedStatementOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.UpdatePreparedStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdatePreparedStatementInput, ...request.Option) (*athena.UpdatePreparedStatementOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdatePreparedStatementInput, ...request.Option) *athena.UpdatePreparedStatementOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UpdatePreparedStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.UpdatePreparedStatementInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkGroup provides a mock function with given fields: _a0
func (_m *AthenaAPI) UpdateWorkGroup(_a0 *athena.UpdateWorkGroupInput) (*athena.UpdateWorkGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *athena.UpdateWorkGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*athena.UpdateWorkGroupInput) (*athena.UpdateWorkGroupOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.UpdateWorkGroupInput) *athena.UpdateWorkGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UpdateWorkGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.UpdateWorkGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkGroupRequest provides a mock function with given fields: _a0
func (_m *AthenaAPI) UpdateWorkGroupRequest(_a0 *athena.UpdateWorkGroupInput) (*request.Request, *athena.UpdateWorkGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *athena.UpdateWorkGroupOutput
	if rf, ok := ret.Get(0).(func(*athena.UpdateWorkGroupInput) (*request.Request, *athena.UpdateWorkGroupOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*athena.UpdateWorkGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*athena.UpdateWorkGroupInput) *athena.UpdateWorkGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*athena.UpdateWorkGroupOutput)
		}
	}

	return r0, r1
}

// UpdateWorkGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *AthenaAPI) UpdateWorkGroupWithContext(_a0 context.Context, _a1 *athena.UpdateWorkGroupInput, _a2 ...request.Option) (*athena.UpdateWorkGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *athena.UpdateWorkGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateWorkGroupInput, ...request.Option) (*athena.UpdateWorkGroupOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateWorkGroupInput, ...request.Option) *athena.UpdateWorkGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UpdateWorkGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.UpdateWorkGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAthenaAPI creates a new instance of AthenaAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAthenaAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *AthenaAPI {
	mock := &AthenaAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
